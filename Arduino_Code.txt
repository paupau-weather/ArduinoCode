#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ESP8266WebServer.h>
#include <EEPROM.h>
#include <Adafruit_BME280.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
#include <ArduinoJson.h>
#include <Adafruit_GFX.h>
#include <Max72xxPanel.h>

// Переменные дисплея
int pinCS = D8;
int numberOfHorizontalDisplays = 1;
int numberOfVerticalDisplays = 4;

// Переменные кнопок
const int button_MODE_PIN = D4;
const int button_MIN_PIN = D3;
const int button_HR_PIN = D2;
int buttonState_MODE = 0;
int buttonState_MIN = 0;
int buttonState_HR = 0;
bool lastModeButtonState = LOW;
bool lastMinButtonState = LOW;
bool lastHrButtonState = LOW;
unsigned long lastButtonPress = 0;
const unsigned long DEBOUNCE_DELAY = 50;

// Переменные для времени
int hours = 0;
int minutes = 0;
int seconds = 0;
unsigned long timer;

// Переменные для двоеточия
const unsigned long BLINK_INTERVAL = 300;
bool colonVisible = true;
unsigned long lastBlinkTime = 0;

// Переменные для бегущей строки
int spacer = 1;
int width = 5 + spacer;

// Переменные точки доступа
const char* AP_SSID = "Homestation";
const char* AP_PASSWORD = "11111111";

// Переменные для управления памятью
const int EEPROM_SIZE = 512;
const int SSID_ADDR = 0;
const int PASSWORD_ADDR = 64;
const int INTERVAL_ADDR = 128;
long savedInterval;
const int DEFAULT_INTERVAL = 60000;

// IP-адрес сервера
char serverIp[] = "192.168.0.100";
int serverPort = 8080;

// Переменные датчиков
float temperature;
float humidity;
float pressure;
float co2;

// Создание объектов
ESP8266WebServer server(80);
String jsonDataToSend;
HTTPClient http;
WiFiClient client;
Max72xxPanel matrix = Max72xxPanel(pinCS, numberOfHorizontalDisplays, numberOfVerticalDisplays);
Adafruit_BME280 bme;

// Чтение строки из EEPROM
String readStringFromEEPROM(int addr, int len) {
  String str = "";
  for (int i = 0; i < len; i++) {
    char c = EEPROM.read(addr + i);
    if (c == 0) break;
    str += c;
  }
  return str;
}

// Запись строки в EEPROM
void writeStringToEEPROM(int addr, const String& str) {
  for (int i = 0; i < str.length(); i++) {
    EEPROM.write(addr + i, str.charAt(i));
  }
  EEPROM.write(addr + str.length(), 0);
  EEPROM.commit();
}

// Обработчик главной страницы
void handleRoot() {
  String html = "<!DOCTYPE html><html><head><title>Wi-Fi Configuration</title>";
  html += "<style>body { font-family: Arial, sans-serif; }</style></head>";
  html += "<body><h1>Wi-Fi Configuration</h1>";
  html += "<form action='/config' method='post'>";
  html += "SSID: <input type='text' name='ssid'><br><br>";
  html += "Password: <input type='password' name='password'><br><br>";
  html += "Interval (ms): <input type='number' name='interval'><br><br>";
  html += "<input type='submit' value='Save'></form>";
  html += "</body></html>";
  server.send(200, "text/html", html);
}

// Обработчик для сохранения конфигурации Wi-Fi
void handleConfig() {
  String ssid = server.arg("ssid");
  String password = server.arg("password");
  String intervalStr = server.arg("interval");
  
  writeStringToEEPROM(SSID_ADDR, ssid);
  writeStringToEEPROM(PASSWORD_ADDR, password);
  
  long interval = intervalStr.toInt();
  if (interval == 0 && intervalStr != "0") {
    interval = DEFAULT_INTERVAL;
    Serial.println("Invalid interval value. Using default.");
  }
  
  EEPROM.put(INTERVAL_ADDR, interval);
  EEPROM.commit();
  
  server.send(200, "text/html", "<h1>Configuration Saved!</h1><p>Device will restart in 5 seconds...</p>");
  delay(5000);
  ESP.restart();
}

// Обработчик для страницы, если страница не найдена
void handleNotFound() {
  String message = "File Not Found\n\n";
  message += "URI: " + server.uri() + "\n";
  message += "Method: " + String((server.method() == HTTP_GET) ? "GET" : "POST") + "\n";
  message += "Arguments: " + String(server.args()) + "\n";
  
  for (uint8_t i = 0; i < server.args(); i++) {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  
  server.send(404, "text/plain", message);
}

void ConnectToWiFi() {
  String savedSSID = readStringFromEEPROM(SSID_ADDR, 32);
  String savedPassword = readStringFromEEPROM(PASSWORD_ADDR, 64);
  EEPROM.get(INTERVAL_ADDR, savedInterval);
  
  if (savedInterval == 0) {
    savedInterval = DEFAULT_INTERVAL;
    Serial.println("No saved interval. Using default.");
  }
  
  Serial.print("Using interval: ");
  Serial.print(savedInterval);
  Serial.println(" ms");
  
  WiFi.mode(WIFI_AP_STA);
  WiFi.softAP(AP_SSID, AP_PASSWORD);
  
  Serial.print("AP SSID: ");
  Serial.println(AP_SSID);
  Serial.print("AP IP address: ");
  Serial.println(WiFi.softAPIP());
  
  if (savedSSID.length() > 0 && savedPassword.length() > 0) {
    Serial.print("Подключение к ");
    Serial.println(savedSSID);
    WiFi.begin(savedSSID.c_str(), savedPassword.c_str());
    
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20) {
      delay(500);
      Serial.print(".");
      attempts++;
    }
    
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println();
      Serial.print("Подключено к ");
      Serial.println(savedSSID);
      Serial.print("IP адрес STA: ");
      Serial.println(WiFi.localIP());
    } else {
      Serial.println();
      Serial.println("Не удалось подключиться к STA.");
    }
  } else {
    Serial.println("Нет сохраненных учетных данных STA.");
  }
  
  server.on("/", handleRoot);
  server.on("/config", HTTP_POST, handleConfig);
  server.onNotFound(handleNotFound);
  server.begin();
  Serial.println("HTTP сервер запущен");
}

void prepareJsonData() {
  temperature = bme.readTemperature();
  humidity = bme.readHumidity();
  pressure = bme.readPressure() / 100.0F;
  co2 = analogRead(A0) * (5.0 / 1023.0);
  
  IPAddress ip = WiFi.localIP();
  char arduinoIPbuffer[16];
  sprintf(arduinoIPbuffer, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);
  String arduinoIP = String(arduinoIPbuffer);
  
  StaticJsonDocument<200> doc;
  doc["IPadress"] = arduinoIP;
  doc["temperature"] = temperature;
  doc["humidity"] = humidity;
  doc["pressure"] = pressure;
  doc["co2"] = co2;
  jsonDataToSend = "";
  serializeJson(doc, jsonDataToSend);
}

unsigned long lastDataSendTime = 0;

void sendSensorData() {
  static unsigned long lastAttemptTime = 0;
  const unsigned long retryInterval = 30000;
  unsigned long currentMillis = millis();
  
  if (currentMillis - lastDataSendTime < savedInterval) {
    return;
  }
  
  if (WiFi.status() != WL_CONNECTED) {
    if (currentMillis - lastAttemptTime >= retryInterval) {
      Serial.println("WiFi not connected. Trying to reconnect...");
      WiFi.reconnect();
      lastAttemptTime = currentMillis;
    }
    return;
  }
  
  prepareJsonData();
  
  HTTPClient http;
  if (http.begin(client, "http://192.168.0.100:8080/data")) {
    http.addHeader("Content-Type", "application/json");
    int httpCode = http.POST(jsonDataToSend);
    
    if (httpCode == HTTP_CODE_OK) {
      Serial.printf("[HTTP] POST successful, code: %d\n", httpCode);
      lastDataSendTime = currentMillis;
    } else {
      Serial.printf("[HTTP] POST failed, error: %s\n", http.errorToString(httpCode).c_str());
      lastDataSendTime = currentMillis - savedInterval + 10000;
    }
    http.end();
    delay(100);
  } else {
    Serial.println("[HTTP] Unable to connect to server");
    lastDataSendTime = currentMillis - savedInterval + 15000;
  }
}

void Time() {
  if (millis() - timer >= 1000) {
    timer = millis();
    seconds++;
    
    if (seconds > 59) {
      seconds = 0;
      minutes++;
    }
    
    if (minutes > 59) {
      minutes = 0;
      hours++;
    }
    
    if (hours > 23) {
      hours = 0;
    }
    
    if (millis() - lastBlinkTime >= BLINK_INTERVAL) {
      lastBlinkTime = millis();
      colonVisible = !colonVisible;
    }
    
    char buffer[20];
    sprintf(buffer, "%02d:%02d:%02d", hours, minutes, seconds);
    Serial.println(buffer);
    
    matrix.fillScreen(LOW);
    matrix.drawChar(1, 0, buffer[0], HIGH, LOW, 1);
    matrix.drawChar(7, 0, buffer[1], HIGH, LOW, 1);
    
    if (colonVisible) {
      matrix.drawChar(13, 0, buffer[2], HIGH, LOW, 1);
    }
    
    matrix.drawChar(19, 0, buffer[3], HIGH, LOW, 1);
    matrix.drawChar(25, 0, buffer[4], HIGH, LOW, 1);
    matrix.write();
  }
}

void Buttons() {
  bool buttonState_MIN = digitalRead(button_MIN_PIN);
  bool buttonState_HR = digitalRead(button_HR_PIN);
  bool buttonState_MODE = digitalRead(button_MODE_PIN);
  
  if (buttonState_MODE != lastModeButtonState && millis() - lastButtonPress > DEBOUNCE_DELAY) {
    lastButtonPress = millis();
    if (buttonState_MODE == HIGH) {
      DisplayOutput();
    }
  }
  lastModeButtonState = buttonState_MODE;
  
  if (buttonState_MIN != lastMinButtonState && millis() - lastButtonPress > DEBOUNCE_DELAY) {
    lastButtonPress = millis();
    if (buttonState_MIN == HIGH) {
      minutes++;
      seconds = 0;
      if (minutes > 59) minutes = 0;
    }
  }
  lastMinButtonState = buttonState_MIN;
  
  if (buttonState_HR != lastHrButtonState && millis() - lastButtonPress > DEBOUNCE_DELAY) {
    lastButtonPress = millis();
    if (buttonState_HR == HIGH) {
      hours++;
      seconds = 0;
      if (hours > 23) hours = 0;
    }
  }
  lastHrButtonState = buttonState_HR;
}

void DisplayOutput() {
  char temperatureString[16];
  dtostrf(temperature, 4, 2, temperatureString);
  String temp = "Temp - ";
  String Celsius = "C";
  String Temperature = temp + temperatureString + Celsius;
  
  char humidityString[16];
  dtostrf(humidity, 4, 2, humidityString);
  String hum = "Hum - ";
  String Percent = "%";
  String humidityStr = hum + humidityString + Percent;
  
  char pressureString[16];
  dtostrf(pressure, 4, 2, pressureString);
  String prs = "Prs - ";
  String PressureUnits_1 = "mm";
  String PressureUnits_2 = "Hg";
  String Pressure = prs + pressureString + PressureUnits_1 + PressureUnits_2;
  
  char COstring[16];
  dtostrf(co2, 4, 3, COstring);
  String co = "CO2 - ";
  String CO = co + COstring + Percent;
  
  int wait = 60;
  
  for (int i = 0; i < width * Temperature.length() + matrix.width() - 1 - spacer; i++) {
    matrix.fillScreen(LOW);
    int letter = i / width;
    int x = (matrix.width() - 1) - i % width;
    int y = (matrix.height() - 8) / 2;
    
    while (x + width - spacer >= 0 && letter >= 0) {
      if (letter < Temperature.length()) {
        matrix.drawChar(x, y, Temperature[letter], HIGH, LOW, 1);
      }
      letter--;
      x -= width;
    }
    matrix.write();
    delay(wait);
  }
  
  for (int i = 0; i < width * Pressure.length() + matrix.width() - 1 - spacer; i++) {
    matrix.fillScreen(LOW);
    int letter = i / width;
    int x = (matrix.width() - 1) - i % width;
    int y = (matrix.height() - 8) / 2;
    
    while (x + width - spacer >= 0 && letter >= 0) {
      if (letter < Pressure.length()) {
        matrix.drawChar(x, y, Pressure[letter], HIGH, LOW, 1);
      }
      letter--;
      x -= width;
    }
    matrix.write();
    delay(wait);
  }
  
  for (int i = 0; i < width * humidityStr.length() + matrix.width() - 1 - spacer; i++) {
    matrix.fillScreen(LOW);
    int letter = i / width;
    int x = (matrix.width() - 1) - i % width;
    int y = (matrix.height() - 8) / 2;
    
    while (x + width - spacer >= 0 && letter >= 0) {
      if (letter < humidityStr.length()) {
        matrix.drawChar(x, y, humidityStr[letter], HIGH, LOW, 1);
      }
      letter--;
      x -= width;
    }
    matrix.write();
    delay(wait);
  }
  
  for (int i = 0; i < width * CO.length() + matrix.width() - 1 - spacer; i++) {
    matrix.fillScreen(LOW);
    int letter = i / width;
    int x = (matrix.width() - 1) - i % width;
    int y = (matrix.height() - 8) / 2;
    
    while (x + width - spacer >= 0 && letter >= 0) {
      if (letter < CO.length()) {
        matrix.drawChar(x, y, CO[letter], HIGH, LOW, 1);
      }
      letter--;
      x -= width;
    }
    matrix.write();
    delay(wait);
  }
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  EEPROM.begin(EEPROM_SIZE);
  Wire.begin();
  
  if (!bme.begin(0x76)) {
    Serial.println("Ошибка инициализации BME280! Проверьте подключение.");
  } else {
    Serial.println("BME280 успешно инициализирован!");
  }
  
  matrix.setIntensity(2);
  matrix.setRotation(3);
  
  pinMode(button_MIN_PIN, INPUT);
  pinMode(button_HR_PIN, INPUT);
  pinMode(button_MODE_PIN, INPUT);
  pinMode(A0, INPUT);
  
  ConnectToWiFi();
}

void loop() {
  server.handleClient();
  sendSensorData();
  Time();
  Buttons();
}